{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","mu","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e213a000.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\n                        </li>\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button cla\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n       const handleUpClick = () => {\n    // console.log(\"New Text Shown\" + text);\n            let newText = text.toUpperCase();\n            setText(newText);\n            props.showAlert('Converted to UpperCase', 'success')\n    }\n        const handleLowClick = () => {\n            let newText = text.toLowerCase();\n            setText(newText);\n            props.showAlert('Converted to LowerCase', 'success')\n        }\n\n        const handleClearClick = () => {\n            let newText = ' ';\n            setText(newText)\n            props.showAlert('Text-Box is Clear', 'success')\n            } \n\n        const handleCopyClick = () => {\n            var text = document.getElementById(\"myBox\")\n            text.select();\n            navigator.clipboard.writeText(text.value);\n            props.showAlert('Copied to Clipboard', 'success')\n            }\n\n        const handleExtraSpacesClick = () => {\n            let newText = text.split(/[ ]+/);\n            setText(newText.join(' '))\n            props.showAlert('Extra Spaces removed', 'success')\n        }\n            \n\n        // const handleBoldClick = () => {\n        //     let newText = text.bold();\n        //     setText(newText);\n        //     }  \n\n        const handleOnChange = (event) => {\n        // console.log(\"on Change\"+ text);\n        setText(event.target.value);\n        }\n\n     const [text, setText] = useState('')\n    return (\n        <>\n        <div className=\"container\" style={{color:props.mode === 'dark' ? 'white' : '#042743' }}>\n                <h1>{props.heading}</h1>\n                <div className=\"mb-3\">\n                {/* <label for=\"myBox\" className=\"form-label\">Example Text Area</label> */}\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === 'dark' ? 'grey' : 'white', color:props.mode === 'dark' ? 'white' : '#042743' }} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1\"  onClick={handleUpClick}>Convert to UpperCase</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert to LowerCase</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>Copy Text</button>\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpacesClick}>Clear Extra Space</button>\n            {/* <button className=\"btn btn-primary mx-1\" onClick={handleBoldClick}>Bold Text</button> */}\n            \n        </div>\n        \n        <div className=\"container\" mu style={{color:props.mode === 'dark' ? 'white' : '#042743' }}>\n            <h2>Your Text Summary</h2>\n            <p> {text.split(\" \").length} words and {text.length} charaters</p>\n            <p>{.008 * text.split(\" \").length} words read</p>\n            <h3>Preview</h3>\n            <p>{text.length> 0 ? text :'Enter the text in Textbox above to preview here'}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n\n    const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\n            </div>\n        \n    )\n}\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert'\n//import About from './components/About'\n// import {BrowserRouter as Router,\n//        Switch,\n//        Route,\n//        Link\n//      } from \"react-router-dom\";\n\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message ,type) => {\n   setAlert({\n     msg : message,\n    type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert('Dark Mode has been enabled' ,'success');\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode has been enabled' ,'success');\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n    {/* <Navbar/> */}\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n      /users---> Component-1,\n      /users/home---> -Component-2\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">  */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>  \n           {/* </Route>\n        </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}